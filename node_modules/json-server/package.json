{
  "_args": [
    [
      {
        "raw": "json-server",
        "scope": null,
        "escapedName": "json-server",
        "name": "json-server",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\iSAMS\\TaskManager"
    ]
  ],
  "_from": "json-server@latest",
  "_id": "json-server@0.12.0",
  "_inCache": true,
  "_location": "/json-server",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/json-server-0.12.0.tgz_1501698412978_0.03529789112508297"
  },
  "_npmUser": {
    "name": "typicode",
    "email": "typicode@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "json-server",
    "scope": null,
    "escapedName": "json-server",
    "name": "json-server",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/json-server/-/json-server-0.12.0.tgz",
  "_shasum": "e8764bcb2fccbbe2a0c3bc406ea1ef04e9007308",
  "_shrinkwrap": null,
  "_spec": "json-server",
  "_where": "C:\\iSAMS\\TaskManager",
  "author": {
    "name": "Typicode",
    "email": "typicode@gmail.com"
  },
  "bin": {
    "json-server": "./bin/index.js"
  },
  "bugs": {
    "url": "https://github.com/typicode/json-server/issues"
  },
  "dependencies": {
    "body-parser": "^1.15.2",
    "chalk": "^1.1.3",
    "compression": "^1.6.0",
    "connect-pause": "^0.1.0",
    "cors": "^2.3.0",
    "errorhandler": "^1.2.0",
    "express": "^4.9.5",
    "express-urlrewrite": "^1.2.0",
    "json-parse-helpfulerror": "^1.0.3",
    "lodash": "^4.11.2",
    "lodash-id": "^0.13.0",
    "lowdb": "^0.15.0",
    "method-override": "^2.1.2",
    "morgan": "^1.3.1",
    "object-assign": "^4.0.1",
    "please-upgrade-node": "^3.0.1",
    "pluralize": "^3.0.0",
    "request": "^2.72.0",
    "server-destroy": "^1.0.1",
    "shortid": "^2.2.6",
    "update-notifier": "^1.0.2",
    "yargs": "^6.0.0"
  },
  "description": "Serves JSON files through REST routes.",
  "devDependencies": {
    "babel-cli": "^6.24.0",
    "babel-preset-env": "^1.3.2",
    "babel-register": "^6.16.3",
    "cross-env": "^2.0.1",
    "eslint": "^3.19.0",
    "eslint-config-prettier": "^2.3.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-import": "^2.6.1",
    "eslint-plugin-node": "^5.1.0",
    "eslint-plugin-prettier": "^2.1.2",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "husky": "^0.14.3",
    "markdown-toc": "^0.13.0",
    "mkdirp": "^0.5.1",
    "mocha": "^3.2.0",
    "os-tmpdir": "^1.0.1",
    "pkg-ok": "^1.0.1",
    "prettier": "^1.5.2",
    "rimraf": "^2.5.2",
    "server-ready": "^0.3.1",
    "standard": "^8.3.0",
    "supertest": "^3.0.0",
    "temp-write": "^2.1.0"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-8sPWyrzxrHsz6reysfvANx/6cbQz/WlspVHOyKvddRbaYeVJtfoyDbw4vRe+gcXkyJ/uZ0I1ph8EIEnysJiJow==",
    "shasum": "e8764bcb2fccbbe2a0c3bc406ea1ef04e9007308",
    "tarball": "https://registry.npmjs.org/json-server/-/json-server-0.12.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "3707376b8ab06e232e0a9bbe34eab9a292305e95",
  "homepage": "https://github.com/typicode/json-server",
  "keywords": [
    "JSON",
    "server",
    "fake",
    "REST",
    "API",
    "prototyping",
    "mock",
    "mocking",
    "test",
    "testing",
    "rest",
    "data",
    "dummy",
    "sandbox"
  ],
  "license": "MIT",
  "main": "./lib/server/index.js",
  "maintainers": [
    {
      "name": "typicode",
      "email": "typicode@gmail.com"
    }
  ],
  "name": "json-server",
  "optionalDependencies": {},
  "readme": "# JSON Server [![](https://travis-ci.org/typicode/json-server.svg?branch=master)](https://travis-ci.org/typicode/json-server) [![](https://badge.fury.io/js/json-server.svg)](http://badge.fury.io/js/json-server) [![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com) [![styled with prettier](https://img.shields.io/badge/styled_with-prettier-ff69b4.svg)](https://github.com/prettier/prettier) [![](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/typicode/json-server?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nGet a full fake REST API with __zero coding__ in __less than 30 seconds__ (seriously)\n\nCreated with <3 for front-end developers who need a quick back-end for prototyping and mocking.\n\n* [Egghead.io free video tutorial - Creating demo APIs with json-server](https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server)\n* [JSONPlaceholder - Live running version](http://jsonplaceholder.typicode.com)\n\nSee also:\n* :dog: [husky - Git hooks made easy](https://github.com/typicode/husky)\n* :hotel: [hotel - developer tool with local .dev domain and https out of the box](https://github.com/typicode/hotel)\n* :atom_symbol: [react-fake-props - generate fake props for your React tests (Jest, Enzyme, ...)](https://github.com/typicode/react-fake-props)\n* :heart: [Patreon page - if you want to support JSON Server development](https://www.patreon.com/typicode)\n\n## Table of contents\n\n<details>\n\n<!-- toc -->\n\n- [Sponsorship](#sponsorship)\n- [Example](#example)\n- [Install](#install)\n- [Routes](#routes)\n  * [Plural routes](#plural-routes)\n  * [Singular routes](#singular-routes)\n  * [Filter](#filter)\n  * [Paginate](#paginate)\n  * [Sort](#sort)\n  * [Slice](#slice)\n  * [Operators](#operators)\n  * [Full-text search](#full-text-search)\n  * [Relationships](#relationships)\n  * [Database](#database)\n  * [Homepage](#homepage)\n- [Extras](#extras)\n  * [Static file server](#static-file-server)\n  * [Alternative port](#alternative-port)\n  * [Access from anywhere](#access-from-anywhere)\n  * [Remote schema](#remote-schema)\n  * [Generate random data](#generate-random-data)\n  * [HTTPS](#https)\n  * [Add custom routes](#add-custom-routes)\n  * [Add middlewares](#add-middlewares)\n  * [CLI usage](#cli-usage)\n  * [Module](#module)\n    + [Simple example](#simple-example)\n    + [Custom routes example](#custom-routes-example)\n    + [Access control example](#access-control-example)\n    + [Custom output example](#custom-output-example)\n    + [Rewriter example](#rewriter-example)\n    + [Mounting JSON Server on another endpoint example](#mounting-json-server-on-another-endpoint-example)\n    + [API](#api)\n  * [Deployment](#deployment)\n- [Links](#links)\n  * [Video](#video)\n  * [Articles](#articles)\n  * [Third-party tools](#third-party-tools)\n- [License](#license)\n\n<!-- tocstop -->\n\n</details>\n\n## Sponsorship\n\nDevelopment of JSON Server and my other projects is generously supported by contributions from people. If you are benefiting from my projects and would like to help keep them financially sustainable, please visit [Patreon](https://patreon.com/typicode).\n\nIf you're a company, you can have your logo here.\n\n## Example\n\nCreate a `db.json` file\n\n```json\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n  ],\n  \"comments\": [\n    { \"id\": 1, \"body\": \"some comment\", \"postId\": 1 }\n  ],\n  \"profile\": { \"name\": \"typicode\" }\n}\n```\n\nStart JSON Server\n\n```bash\n$ json-server --watch db.json\n```\n\nNow if you go to [http://localhost:3000/posts/1](), you'll get\n\n```json\n{ \"id\": 1, \"title\": \"json-server\", \"author\": \"typicode\" }\n```\n\nAlso when doing requests, it's good to know that:\n\n- If you make POST, PUT, PATCH or DELETE requests, changes will be automatically and safely saved to `db.json` using [lowdb](https://github.com/typicode/lowdb).\n- Your request body JSON should be object enclosed, just like the GET output. (for example `{\"name\": \"Foobar\"}`)\n- Id values are not mutable. Any `id` value in the body of your PUT or PATCH request wil be ignored. Only a value set in a POST request wil be respected, but only if not already taken.\n- A POST, PUT or PATCH request should include a `Content-Type: application/json` header to use the JSON in the request body. Otherwise it will result in a 200 OK but without changes being made to the data.\n\n## Install\n\n```bash\n$ npm install -g json-server\n```\n\n## Routes\n\nBased on the previous `db.json` file, here are all the default routes. You can also add [other routes](#add-custom-routes) using `--routes`.\n\n### Plural routes\n\n```\nGET    /posts\nGET    /posts/1\nPOST   /posts\nPUT    /posts/1\nPATCH  /posts/1\nDELETE /posts/1\n```\n\n### Singular routes\n\n```\nGET    /profile\nPOST   /profile\nPUT    /profile\nPATCH  /profile\n```\n\n### Filter\n\nUse `.` to access deep properties\n\n```\nGET /posts?title=json-server&author=typicode\nGET /posts?id=1&id=2\nGET /comments?author.name=typicode\n```\n\n### Paginate\n\nUse `_page` and optionally `_limit` to paginate returned data.\n\nIn the `Link` header you'll get `first`, `prev`, `next` and `last` links.\n\n\n```\nGET /posts?_page=7\nGET /posts?_page=7&_limit=20\n```\n\n_10 items are returned by default_\n\n### Sort\n\nAdd `_sort` and `_order` (ascending order by default)\n\n```\nGET /posts?_sort=views&_order=asc\nGET /posts/1/comments?_sort=votes&_order=asc\n```\n\nFor multiple fields, use the following format:\n\n```\nGET /posts?_sort=user,views&_order=desc,asc\n```\n\n### Slice\n\nAdd `_start` and `_end` or `_limit` (an `X-Total-Count` header is included in the response)\n\n```\nGET /posts?_start=20&_end=30\nGET /posts/1/comments?_start=20&_end=30\nGET /posts/1/comments?_start=20&_limit=10\n```\n\n_Works exactly as [Array.slice](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) (i.e. `_start` is inclusive and `_end` exclusive)_\n\n### Operators\n\nAdd `_gte` or `_lte` for getting a range\n\n```\nGET /posts?views_gte=10&views_lte=20\n```\n\nAdd `_ne` to exclude a value\n\n```\nGET /posts?id_ne=1\n```\n\nAdd `_like` to filter (RegExp supported)\n\n```\nGET /posts?title_like=server\n```\n\n### Full-text search\n\nAdd `q`\n\n```\nGET /posts?q=internet\n```\n\n### Relationships\n\nTo include children resources, add `_embed`\n\n```\nGET /posts?_embed=comments\nGET /posts/1?_embed=comments\n```\n\nTo include parent resource, add `_expand`\n\n```\nGET /comments?_expand=post\nGET /comments/1?_expand=post\n```\n\nTo get or create nested resources (by default one level, [add custom routes](#add-custom-routes) for more)\n\n```\nGET  /posts/1/comments\nPOST /posts/1/comments\n```\n\n### Database\n\n```\nGET /db\n```\n\n### Homepage\n\nReturns default index file or serves `./public` directory\n\n```\nGET /\n```\n\n## Extras\n\n### Static file server\n\nYou can use JSON Server to serve your HTML, JS and CSS, simply create a `./public` directory\nor use `--static` to set a different static files directory.\n\n```bash\nmkdir public\necho 'hello world' > public/index.html\njson-server db.json\n```\n\n```bash\njson-server db.json --static ./some-other-dir\n```\n\n### Alternative port\n\nYou can start JSON Server on other ports with the `--port` flag:\n\n```bash\n$ json-server --watch db.json --port 3004\n```\n\n### Access from anywhere\n\nYou can access your fake API from anywhere using CORS and JSONP.\n\n### Remote schema\n\nYou can load remote schemas.\n\n```bash\n$ json-server http://example.com/file.json\n$ json-server http://jsonplaceholder.typicode.com/db\n```\n\n### Generate random data\n\nUsing JS instead of a JSON file, you can create data programmatically.\n\n```javascript\n// index.js\nmodule.exports = () => {\n  const data = { users: [] }\n  // Create 1000 users\n  for (let i = 0; i < 1000; i++) {\n    data.users.push({ id: i, name: `user${i}` })\n  }\n  return data\n}\n```\n\n```bash\n$ json-server index.js\n```\n\n__Tip__ use modules like [Faker](https://github.com/Marak/faker.js), [Casual](https://github.com/boo1ean/casual), [Chance](https://github.com/victorquinn/chancejs) or [JSON Schema Faker](https://github.com/json-schema-faker/json-schema-faker).\n\n### HTTPS\n\nThere's many way to set up SSL in development. One simple way though is to use [hotel](https://github.com/typicode/hotel).\n\n### Add custom routes\n\nCreate a `routes.json` file. Pay attention to start every route with `/`.\n\n```json\n{\n  \"/api/*\": \"/$1\",\n  \"/:resource/:id/show\": \"/:resource/:id\",\n  \"/posts/:category\": \"/posts?category=:category\",\n  \"/articles\\\\?id=:id\": \"/posts/:id\"\n}\n```\n\nStart JSON Server with `--routes` option.\n\n```bash\njson-server db.json --routes routes.json\n```\n\nNow you can access resources using additional routes.\n\n```sh\n/api/posts # → /posts\n/api/posts/1  # → /posts/1\n/posts/1/show # → /posts/1\n/posts/javascript # → /posts?category=javascript\n/articles?id=1 # → /posts/1\n```\n\n### Add middlewares\n\nYou can add your middlewares from the CLI using `--middlewares` option:\n\n```js\n// hello.js\nmodule.exports = (req, res, next) => {\n  res.header('X-Hello', 'World')\n  next()\n}\n```\n\n```bash\njson-server db.json --middlewares ./hello.js\njson-server db.json --middlewares ./first.js ./second.js\n```\n\n### CLI usage\n\n```\njson-server [options] <source>\n\nOptions:\n  --config, -c       Path to config file           [default: \"json-server.json\"]\n  --port, -p         Set port                                    [default: 3000]\n  --host, -H         Set host                               [default: \"0.0.0.0\"]\n  --watch, -w        Watch file(s)                                     [boolean]\n  --routes, -r       Path to routes file\n  --middlewares, -m  Paths to middleware files                           [array]\n  --static, -s       Set static files directory\n  --read-only, --ro  Allow only GET requests                           [boolean]\n  --no-cors, --nc    Disable Cross-Origin Resource Sharing             [boolean]\n  --no-gzip, --ng    Disable GZIP Content-Encoding                     [boolean]\n  --snapshots, -S    Set snapshots directory                      [default: \".\"]\n  --delay, -d        Add delay to responses (ms)\n  --id, -i           Set database id property (e.g. _id)         [default: \"id\"]\n  --foreignKeySuffix, --fks  Set foreign key suffix, (e.g. _id as in post_id)\n                                                                 [default: \"Id\"]\n  --quiet, -q        Suppress log messages from output                 [boolean]\n  --help, -h         Show help                                         [boolean]\n  --version, -v      Show version number                               [boolean]\n\nExamples:\n  json-server db.json\n  json-server file.js\n  json-server http://example.com/db.json\n\nhttps://github.com/typicode/json-server\n```\n\nYou can also set options in a `json-server.json` configuration file.\n\n```json\n{\n  \"port\": 3000\n}\n```\n\n### Module\n\nIf you need to add authentication, validation, or __any behavior__, you can use the project as a module in combination with other Express middlewares.\n\n#### Simple example\n\n```sh\n$ npm install json-server --save-dev\n```\n\n```js\n// server.js\nconst jsonServer = require('json-server')\nconst server = jsonServer.create()\nconst router = jsonServer.router('db.json')\nconst middlewares = jsonServer.defaults()\n\nserver.use(middlewares)\nserver.use(router)\nserver.listen(3000, () => {\n  console.log('JSON Server is running')\n})\n```\n\n```sh\n$ node server.js\n```\n\nThe path you provide to the `jsonServer.router` function  is relative to the directory from where you launch your node process. If you run the above code from another directory, it’s better to use an absolute path:\n\n```js\nconst path = require('path')\nconst router = jsonServer.router(path.join(__dirname, 'db.json'))\n```\n\nFor an in-memory database, simply pass an object to `jsonServer.router()`.\n\nPlease note also that `jsonServer.router()` can be used in existing Express projects.\n\n#### Custom routes example\n\nLet's say you want a route that echoes query parameters and another one that set a timestamp on every resource created.\n\n```js\nconst jsonServer = require('json-server')\nconst server = jsonServer.create()\nconst router = jsonServer.router('db.json')\nconst middlewares = jsonServer.defaults()\n\n// Set default middlewares (logger, static, cors and no-cache)\nserver.use(middlewares)\n\n// Add custom routes before JSON Server router\nserver.get('/echo', (req, res) => {\n  res.jsonp(req.query)\n})\n\n// To handle POST, PUT and PATCH you need to use a body-parser\n// You can use the one used by JSON Server\nserver.use(jsonServer.bodyParser)\nserver.use((req, res, next) => {\n  if (req.method === 'POST') {\n    req.body.createdAt = Date.now()\n  }\n  // Continue to JSON Server router\n  next()\n})\n\n// Use default router\nserver.use(router)\nserver.listen(3000, () => {\n  console.log('JSON Server is running')\n})\n```\n\n#### Access control example\n\n```js\nconst jsonServer = require('json-server')\nconst server = jsonServer.create()\nconst router = jsonServer.router('db.json')\nconst middlewares = jsonServer.defaults()\n\nserver.use(middlewares)\nserver.use((req, res, next) => {\n if (isAuthorized(req)) { // add your authorization logic here\n   next() // continue to JSON Server router\n } else {\n   res.sendStatus(401)\n }\n})\nserver.use(router)\nserver.listen(3000, () => {\n  console.log('JSON Server is running')\n})\n```\n#### Custom output example\n\nTo modify responses, overwrite `router.render` method:\n\n```javascript\n// In this example, returned resources will be wrapped in a body property\nrouter.render = (req, res) => {\n  res.jsonp({\n    body: res.locals.data\n  })\n}\n```\n\nYou can set your own status code for the response:\n\n\n```javascript\n// In this example we simulate a server side error response\nrouter.render = (req, res) => {\n  res.status(500).jsonp({\n    error: \"error message here\"\n  })\n}\n```\n\n#### Rewriter example\n\nTo add rewrite rules, use `jsonServer.rewriter()`:\n\n```javascript\n// Add this before server.use(router)\nserver.use(jsonServer.rewriter({\n  '/api/*': '/$1',\n  '/blog/:resource/:id/show': '/:resource/:id'\n}))\n```\n\n#### Mounting JSON Server on another endpoint example\n\nAlternatively, you can also mount the router on `/api`.\n\n```javascript\nserver.use('/api', router)\n```\n\n#### API\n\n__`jsonServer.create()`__\n\nReturns an Express server.\n\n__`jsonServer.defaults([options])`__\n\nReturns middlewares used by JSON Server.\n\n* options\n  * `static` path to static files\n  * `logger` enable logger middleware (default: true)\n  * `bodyParser` enable body-parser middleware (default: true)\n  * `noCors` disable CORS (default: false)\n  * `readOnly` accept only GET requests (default: false)\n  \n__`jsonServer.router([path|object])`__\n\nReturns JSON Server router. \n\n### Deployment\n\nYou can deploy JSON Server. For example, [JSONPlaceholder](http://jsonplaceholder.typicode.com) is an online fake API powered by JSON Server and running on Heroku.\n\n## Links\n\n### Video\n\n* [Creating Demo APIs with json-server on egghead.io](https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server)\n\n### Articles\n\n* [Node Module Of The Week - json-server](http://nmotw.in/json-server/)\n* [Mock up your REST API with JSON Server](http://www.betterpixels.co.uk/projects/2015/05/09/mock-up-your-rest-api-with-json-server/)\n* [ng-admin: Add an AngularJS admin GUI to any RESTful API](http://marmelab.com/blog/2014/09/15/easy-backend-for-your-restful-api.html)\n* [Fast prototyping using Restangular and Json-server](http://glebbahmutov.com/blog/fast-prototyping-using-restangular-and-json-server/)\n* [Create a Mock REST API in Seconds for Prototyping your Frontend](https://coligo.io/create-mock-rest-api-with-json-server/)\n* [No API? No Problem! Rapid Development via Mock APIs](https://medium.com/@housecor/rapid-development-via-mock-apis-e559087be066#.93d7w8oro)\n\n### Third-party tools\n\n* [Grunt JSON Server](https://github.com/tfiwm/grunt-json-server)\n* [Docker JSON Server](https://github.com/clue/docker-json-server)\n* [JSON Server GUI](https://github.com/naholyr/json-server-gui)\n* [JSON file generator](https://github.com/dfsq/json-server-init)\n* [JSON Server extension](https://github.com/maty21/json-server-extension)\n\n## License\n\nMIT - [Typicode](https://github.com/typicode) - [Patreon](https://www.patreon.com/typicode)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/typicode/json-server.git"
  },
  "scripts": {
    "build": "babel src -d lib --copy-files",
    "format": "eslint . --fix",
    "precommit": "npm test",
    "prepublishOnly": "npm run build && pkg-ok",
    "start": "babel-node src/cli/bin",
    "test": "npm run test:cli && npm run test:server && eslint .",
    "test:cli": "npm run build && cross-env NODE_ENV=test mocha test/cli/*.js",
    "test:server": "cross-env NODE_ENV=test mocha test/server/*.js",
    "toc": "markdown-toc -i README.md"
  },
  "version": "0.12.0"
}
